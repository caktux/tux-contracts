/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AuctionsInterface extends ethers.utils.Interface {
  functions: {
    "acceptOffer(uint256)": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "addCreator(uint256,address)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bids(uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "collectorRanking(uint256)": FunctionFragment;
    "collectorStats(address)": FunctionFragment;
    "contractIDs(address)": FunctionFragment;
    "contractRanking(uint256)": FunctionFragment;
    "contracts(uint256)": FunctionFragment;
    "createAuction(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createBid(uint256,uint256)": FunctionFragment;
    "createHouse(string,address,uint16,bool,string)": FunctionFragment;
    "creatorRanking(uint256)": FunctionFragment;
    "creatorStats(address)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "getAuctionBids(uint256)": FunctionFragment;
    "getBidderAuctions(address)": FunctionFragment;
    "getCreatorHouses(address)": FunctionFragment;
    "getCuratorHouses(address)": FunctionFragment;
    "getHouseAuctions(uint256)": FunctionFragment;
    "getHouseCreators(uint256)": FunctionFragment;
    "getHouseQueue(uint256)": FunctionFragment;
    "getPreviousAuctions(bytes32)": FunctionFragment;
    "getSellerAuctions(address)": FunctionFragment;
    "getTokenOffers(bytes32)": FunctionFragment;
    "houseIDs(string)": FunctionFragment;
    "houses(uint256)": FunctionFragment;
    "makeOffer(address,uint256,uint256)": FunctionFragment;
    "minimumIncrementPercentage()": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "ranking(uint256)": FunctionFragment;
    "registerTokenContract(address)": FunctionFragment;
    "removeCreator(uint256,address)": FunctionFragment;
    "setAuctionApproval(uint256,bool)": FunctionFragment;
    "setAuctionReservePrice(uint256,uint256)": FunctionFragment;
    "timeBuffer()": FunctionFragment;
    "tokenAuction(bytes32)": FunctionFragment;
    "totalAuctions()": FunctionFragment;
    "totalCollectors()": FunctionFragment;
    "totalContracts()": FunctionFragment;
    "totalCreators()": FunctionFragment;
    "totalHouses()": FunctionFragment;
    "updateBio(string)": FunctionFragment;
    "updateFee(uint256,uint16)": FunctionFragment;
    "updateMetadata(uint256,string)": FunctionFragment;
    "updateName(string)": FunctionFragment;
    "updatePicture(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addCreator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectorRanking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectorStats",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "contractIDs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractRanking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createHouse",
    values: [string, string, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorRanking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderAuctions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorHouses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCuratorHouses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHouseAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHouseCreators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHouseQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviousAuctions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerAuctions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOffers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "houseIDs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "houses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ranking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCreator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionApproval",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionReservePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAuction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCreators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHouses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateBio", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "updateName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updatePicture",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectorRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidderAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorHouses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCuratorHouses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHouseAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHouseCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHouseQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreviousAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "houseIDs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "houses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ranking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHouses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateBio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePicture",
    data: BytesLike
  ): Result;

  events: {
    "AccountUpdated(address)": EventFragment;
    "AuctionApprovalUpdated(uint256,bool)": EventFragment;
    "AuctionBid(uint256,address,uint256,bool,bool)": EventFragment;
    "AuctionCanceled(uint256)": EventFragment;
    "AuctionCreated(uint256)": EventFragment;
    "AuctionDurationExtended(uint256,uint256)": EventFragment;
    "AuctionEnded(uint256)": EventFragment;
    "AuctionReservePriceUpdated(uint256,uint256)": EventFragment;
    "CreatorAdded(uint256,address)": EventFragment;
    "CreatorRemoved(uint256,address)": EventFragment;
    "FeeUpdated(uint256,uint16)": EventFragment;
    "HouseCreated(uint256)": EventFragment;
    "MetadataUpdated(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
}

export class Auctions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionsInterface;

  functions: {
    acceptOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        bioHash: string;
        pictureHash: string;
        creatorRank: BigNumber;
        collectorRank: BigNumber;
      }
    >;

    addCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        tokenContract: string;
        tokenId: BigNumber;
        tokenOwner: string;
        duration: BigNumber;
        reservePrice: BigNumber;
        houseId: BigNumber;
        fee: number;
        approved: boolean;
        firstBidTime: BigNumber;
        amount: BigNumber;
        bidder: string;
        created: BigNumber;
      }
    >;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        timestamp: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collectorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bids: BigNumber;
        sales: BigNumber;
        bought: BigNumber;
        totalSold: BigNumber;
        totalSpent: BigNumber;
      }
    >;

    contractIDs(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    contractRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        tokenContract: string;
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
        rank: BigNumber;
      }
    >;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      houseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createHouse(
      name: string,
      curator: string,
      fee: BigNumberish,
      preApproved: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creatorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creatorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
      }
    >;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionBids(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBidderAuctions(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCreatorHouses(
      creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCuratorHouses(
      curator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getHouseAuctions(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getHouseCreators(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getHouseQueue(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPreviousAuctions(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSellerAuctions(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenOffers(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    houseIDs(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    houses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        curator: string;
        fee: number;
        preApproved: boolean;
        metadata: string;
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
        feesTotal: BigNumber;
        activeAuctions: BigNumber;
        rank: BigNumber;
      }
    >;

    makeOffer(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumIncrementPercentage(overrides?: CallOverrides): Promise<[number]>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        tokenContract: string;
        tokenId: BigNumber;
        amount: BigNumber;
        from: string;
      }
    >;

    ranking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAuction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollectors(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalContracts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCreators(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalHouses(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBio(
      bioHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      houseId: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMetadata(
      houseId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePicture(
      pictureHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      name: string;
      bioHash: string;
      pictureHash: string;
      creatorRank: BigNumber;
      collectorRank: BigNumber;
    }
  >;

  addCreator(
    houseId: BigNumberish,
    creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      tokenContract: string;
      tokenId: BigNumber;
      tokenOwner: string;
      duration: BigNumber;
      reservePrice: BigNumber;
      houseId: BigNumber;
      fee: number;
      approved: boolean;
      firstBidTime: BigNumber;
      amount: BigNumber;
      bidder: string;
      created: BigNumber;
    }
  >;

  bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      timestamp: BigNumber;
      bidder: string;
      value: BigNumber;
    }
  >;

  cancelAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectorRanking(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collectorStats(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bids: BigNumber;
      sales: BigNumber;
      bought: BigNumber;
      totalSold: BigNumber;
      totalSpent: BigNumber;
    }
  >;

  contractIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  contractRanking(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      tokenContract: string;
      bids: BigNumber;
      sales: BigNumber;
      total: BigNumber;
      rank: BigNumber;
    }
  >;

  createAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    houseId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBid(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createHouse(
    name: string,
    curator: string,
    fee: BigNumberish,
    preApproved: boolean,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creatorRanking(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  creatorStats(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      bids: BigNumber;
      sales: BigNumber;
      total: BigNumber;
    }
  >;

  endAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionBids(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBidderAuctions(
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCreatorHouses(
    creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCuratorHouses(
    curator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getHouseAuctions(
    houseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getHouseCreators(
    houseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getHouseQueue(
    houseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPreviousAuctions(
    tokenHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSellerAuctions(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenOffers(
    tokenHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  houseIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  houses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      number,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      curator: string;
      fee: number;
      preApproved: boolean;
      metadata: string;
      bids: BigNumber;
      sales: BigNumber;
      total: BigNumber;
      feesTotal: BigNumber;
      activeAuctions: BigNumber;
      rank: BigNumber;
    }
  >;

  makeOffer(
    tokenContract: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumIncrementPercentage(overrides?: CallOverrides): Promise<number>;

  offers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      tokenContract: string;
      tokenId: BigNumber;
      amount: BigNumber;
      from: string;
    }
  >;

  ranking(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  registerTokenContract(
    tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCreator(
    houseId: BigNumberish,
    creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionApproval(
    auctionId: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionReservePrice(
    auctionId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAuction(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollectors(overrides?: CallOverrides): Promise<BigNumber>;

  totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

  totalCreators(overrides?: CallOverrides): Promise<BigNumber>;

  totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

  updateBio(
    bioHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    houseId: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMetadata(
    houseId: BigNumberish,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateName(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePicture(
    pictureHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        bioHash: string;
        pictureHash: string;
        creatorRank: BigNumber;
        collectorRank: BigNumber;
      }
    >;

    addCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        tokenContract: string;
        tokenId: BigNumber;
        tokenOwner: string;
        duration: BigNumber;
        reservePrice: BigNumber;
        houseId: BigNumber;
        fee: number;
        approved: boolean;
        firstBidTime: BigNumber;
        amount: BigNumber;
        bidder: string;
        created: BigNumber;
      }
    >;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        timestamp: BigNumber;
        bidder: string;
        value: BigNumber;
      }
    >;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collectorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bids: BigNumber;
        sales: BigNumber;
        bought: BigNumber;
        totalSold: BigNumber;
        totalSpent: BigNumber;
      }
    >;

    contractIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        tokenContract: string;
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
        rank: BigNumber;
      }
    >;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createHouse(
      name: string,
      curator: string,
      fee: BigNumberish,
      preApproved: boolean,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    creatorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
      }
    >;

    endAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionBids(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBidderAuctions(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCreatorHouses(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCuratorHouses(
      curator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getHouseAuctions(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getHouseCreators(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getHouseQueue(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPreviousAuctions(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSellerAuctions(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenOffers(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    houseIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    houses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        number,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        curator: string;
        fee: number;
        preApproved: boolean;
        metadata: string;
        bids: BigNumber;
        sales: BigNumber;
        total: BigNumber;
        feesTotal: BigNumber;
        activeAuctions: BigNumber;
        rank: BigNumber;
      }
    >;

    makeOffer(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumIncrementPercentage(overrides?: CallOverrides): Promise<number>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        tokenContract: string;
        tokenId: BigNumber;
        amount: BigNumber;
        from: string;
      }
    >;

    ranking(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerTokenContract(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAuction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollectors(overrides?: CallOverrides): Promise<BigNumber>;

    totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

    totalCreators(overrides?: CallOverrides): Promise<BigNumber>;

    totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

    updateBio(bioHash: string, overrides?: CallOverrides): Promise<void>;

    updateFee(
      houseId: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      houseId: BigNumberish,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateName(name: string, overrides?: CallOverrides): Promise<void>;

    updatePicture(
      pictureHash: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountUpdated(
      owner?: string | null
    ): TypedEventFilter<[string], { owner: string }>;

    AuctionApprovalUpdated(
      auctionId?: BigNumberish | null,
      approved?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { auctionId: BigNumber; approved: boolean }
    >;

    AuctionBid(
      auctionId?: BigNumberish | null,
      bidder?: null,
      value?: null,
      firstBid?: null,
      extended?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean, boolean],
      {
        auctionId: BigNumber;
        bidder: string;
        value: BigNumber;
        firstBid: boolean;
        extended: boolean;
      }
    >;

    AuctionCanceled(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    AuctionCreated(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    AuctionDurationExtended(
      auctionId?: BigNumberish | null,
      duration?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; duration: BigNumber }
    >;

    AuctionEnded(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    AuctionReservePriceUpdated(
      auctionId?: BigNumberish | null,
      reservePrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; reservePrice: BigNumber }
    >;

    CreatorAdded(
      houseId?: BigNumberish | null,
      creator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { houseId: BigNumber; creator: string }
    >;

    CreatorRemoved(
      houseId?: BigNumberish | null,
      creator?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { houseId: BigNumber; creator: string }
    >;

    FeeUpdated(
      houseId?: BigNumberish | null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { houseId: BigNumber; fee: number }
    >;

    HouseCreated(
      houseId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { houseId: BigNumber }>;

    MetadataUpdated(
      houseId?: BigNumberish | null,
      metadata?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { houseId: BigNumber; metadata: string }
    >;
  };

  estimateGas: {
    acceptOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectorStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      houseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createHouse(
      name: string,
      curator: string,
      fee: BigNumberish,
      preApproved: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creatorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionBids(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidderAuctions(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorHouses(
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCuratorHouses(
      curator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHouseAuctions(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHouseCreators(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHouseQueue(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreviousAuctions(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerAuctions(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenOffers(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    houseIDs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    houses(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    makeOffer(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ranking(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAuction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollectors(overrides?: CallOverrides): Promise<BigNumber>;

    totalContracts(overrides?: CallOverrides): Promise<BigNumber>;

    totalCreators(overrides?: CallOverrides): Promise<BigNumber>;

    totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

    updateBio(
      bioHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(
      houseId: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMetadata(
      houseId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePicture(
      pictureHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractIDs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      houseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createHouse(
      name: string,
      curator: string,
      fee: BigNumberish,
      preApproved: boolean,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creatorRanking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionBids(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidderAuctions(
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorHouses(
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCuratorHouses(
      curator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHouseAuctions(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHouseCreators(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHouseQueue(
      houseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreviousAuctions(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerAuctions(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOffers(
      tokenHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    houseIDs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    houses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOffer(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ranking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCreator(
      houseId: BigNumberish,
      creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAuction(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCreators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHouses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBio(
      bioHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      houseId: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      houseId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePicture(
      pictureHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
